#include <Arduino.h>
#include "LiquidCrystal.h"
#include <SPI.h>
#include <Wire.h>
#include "LibRobus.h"

//valeur alcool emis
int val;

//Position pin des boutons
int boutonStart = 41;
int boutonRestart = 43;
int boutonStop = 45;

//PIN arduino
LiquidCrystal lcd(8,9,10,11,12,13);
int analogPin = 0;
//manque PIN led et detecteur de poid

int readAlcohol()
{
  int val = 0;
  int val1 = 0;
  int val2 = 0;
  int val3 = 0; 

  lcd.clear();
  val1 = analogRead(analogPin); 
  delay(10);
  val2 = analogRead(analogPin); 
  delay(10);
  val3 = analogRead(analogPin);
  
  val = (val1+val2+val3)/3;
  return val;
 }



void virage(int VirageDegre)
{
  ENCODER_ReadReset(1);
  ENCODER_ReadReset(0);
  // code
  //la circonférence d'une roue est 23.93894cm
  //la circonférence d'un tour du robot est de 59.6902cm
  //1 degré est égal à 24.934 pulse, donc 25 pulse.

  //définition des variables
    
    int Arondir;
    float UnPulse = 0.0469;
  
    float ValeurPulse;
    //trouve le nombre de pulse nécessaire au virage
    ValeurPulse = abs(VirageDegre/UnPulse);
    Arondir = round(ValeurPulse);
    
   //réinitialise le compteur de pule de l'encodeur
   ENCODER_Reset(0);
   ENCODER_Reset(1);
  //Permet d'arrêter le virage à la bonne direction. 
  
    //Défini si le virage sera vers la gauche ou vers la droite. Positif est en sense horaire et négatif est anti-horaire. 
      if (VirageDegre>=0)
      {
        ENCODER_Reset(0);
        ENCODER_Reset(1);
        while (ENCODER_Read(0)<= Arondir)
        {
          if (ENCODER_Read(0) <= (Arondir/3)) 
          {
            MOTOR_SetSpeed(0,0.4);
            MOTOR_SetSpeed(1,-0.4);
          }
          else if (ENCODER_Read(0) <= (2*Arondir/3) )
          {
            MOTOR_SetSpeed(0,0.3);
            MOTOR_SetSpeed(1,-0.3);
          }
          else
          {
            MOTOR_SetSpeed(0,0.2);
            MOTOR_SetSpeed(1,-0.2);
          }
          
        }
        
      }
      else if(VirageDegre<=0)
      {
        while (ENCODER_Read(1)<= Arondir)
        {
          if (ENCODER_Read(1)<= (Arondir/3))
          {
            MOTOR_SetSpeed(0,-0.4);
            MOTOR_SetSpeed(1,0.4);
          }
          
          else if (ENCODER_Read(1) <= (2*Arondir/3))
          {
            MOTOR_SetSpeed(0,-0.3);
            MOTOR_SetSpeed(1,0.3);
          }
          else 
          {
            MOTOR_SetSpeed(0,-0.2);
            MOTOR_SetSpeed(1,0.2);
          }
        }
        
        
      }
  
  //Arrête la rotation
  MOTOR_SetSpeed(0,0);
  MOTOR_SetSpeed(1,0);
  //réinitialise le compteur de pule de l'encodeur
   ENCODER_Reset(0);
   ENCODER_Reset(1);

}

bool BoutonStart()
{
  bool interaction;
  if(digitalRead(boutonStart) == LOW)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    interaction = true;
  }
  else
  if(digitalRead(boutonStart) == HIGH)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    interaction = false;
  }
  
  return interaction;
}

bool BoutonRestart()
{
  bool interaction;
  if(digitalRead(boutonRestart) == LOW)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    interaction = true;
  }
  else
  if(digitalRead(boutonRestart) == HIGH)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    interaction = false;
  }
  
  return interaction;
}

bool BoutonStop()
{
  bool interaction;
  if(digitalRead(boutonStop) == LOW)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    interaction = true;
  }
  else
  if(digitalRead(boutonStop) == HIGH)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    interaction = false;
  }
  
  return interaction;
}

void capteurdistance()
{
  int i=1;
  int distance;
  while (i==1)
  {
    distance=analogRead(3);
    //lcd.print(distance);
    //lcd.clear();
    if (distance<=600 && distance>=250)
    {
      i=0;
    }
    delay(50);
  }
  delay(5000);
  SERVO_SetAngle(0,32);
}

void printTexteIndicateur(int value)
{
  lcd.clear();
  lcd.setCursor(0,0);
  
  if(value<200)
  {
      lcd.print("Tu es sobre.");
      lcd.setCursor(0,1);
      lcd.print("0.00 mg/L");
  }
  else if (value>=200 && value<275)
  {
      lcd.print("Tu as bu un peu");
      lcd.setCursor(0,1);
      lcd.print("0.04 mg/L");
  }
  else if (value>=275 && value<375)
  {
      lcd.print("Fait attention");
      lcd.setCursor(0,1);
      lcd.print("0.07 mg/L");
  }
  else if (value>=375 && value <550)
  {
      lcd.print("Conduit pas!");
      lcd.setCursor(0,1);
      lcd.print("0.1 mg/L");
  }
  else 
  {
    lcd.print("Tu es soaul");
    lcd.setCursor(0,1);
    lcd.print("0.15 mg/L");
  }
 }
 
void action(int value)
{
  lcd.setCursor(0,0);

  //ajun
  if (value<275)
  {
    //fonction dels verts inserer ici

    SERVO_SetAngle(0,90);
    delay(3000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Bonne soiree");
    delay(5000);
  }

  //un peu bu
  else if (value>=275 && value<375)
  {
    //fonction del jaune inserer ici
    SERVO_SetAngle(0,90);
    delay(3000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Faite attention");
    lcd.setCursor(0,1);
    lcd.print("Bonne soiree");
    delay(5000);
  }

  //peter
  else 
  {
    //fonction del police inserer ici
  
    delay(3000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Prenez un taxi");
    lcd.setCursor(0,1);
    lcd.print("Bonne soiree");
    delay(2000);
    virage(1080);
  }

}

void setup()   {     
 BoardInit();  
 Serial.begin(9600);         
 lcd.begin(16,2);
 lcd.setCursor(0,0);
 pinMode(boutonStart, INPUT_PULLUP);
 pinMode(boutonStop, INPUT_PULLUP);
 pinMode(boutonRestart, INPUT_PULLUP);
 pinMode(0, INPUT);
 SERVO_Enable(0);
}


void loop() {  
  //place le covercle parfait
  SERVO_SetAngle(0,32);
  //Vérifie l'intéractions
  bool interaction = false;
  bool reessayer = false;
  bool arreter = false;

  //Interaction avec l'usager.
  delay(500);
  

  //fonction bouton a inserer ici
  do
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Bonsoir peser");
    lcd.setCursor(0,1);
    lcd.print("bouton vert");
    delay(50);
  } while (BoutonStart()==false);
  

  delay(1000);

  //ouverture du tirroir
  SERVO_SetAngle(0,90);

    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Veiller deposer");
    lcd.setCursor(0,1);
    lcd.print("vos cles");

    //fonction detecteur de cle
    capteurdistance();
    delay(2000);

  do
  {
    reessayer = false;
    //creation d'un timer
    for(int i=5; i > 0; i--)
   {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Souffler dans:");
      lcd.setCursor(0,1);
      lcd.print(i);
      delay(1000);
    }

    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Souffler");
    lcd.setCursor(0,1);
    lcd.print("5sec !");
    delay(2000);

    //prend la valeur de l'alcotest a 2sec /5sec
    val = readAlcohol();
   delay(1000);

    //affiche la valeur d'alchool emis
    printTexteIndicateur(val);

    //fait l'action
    action(val);
    SERVO_SetAngle(0,32);

     do
      {
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Restart/Stop");
        lcd.setCursor(0,1);
        lcd.print("jaune/rouge");
        delay(100);

        if(BoutonStop() == true)
        {
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Arret");
          lcd.setCursor(0,1);
          lcd.print("Bonne journee");
          delay(2000);
          interaction = true;
        }
        if(BoutonRestart() == true || BoutonStop() == true)
        {
          interaction = true;
          if(BoutonRestart() == true)
            reessayer = true;
          if(BoutonStop() == true)
            arreter = true;
        }
        else
          if(BoutonStart() == true)
          {
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Erreur de saisie");
          }
        delay(100);
      }while(interaction == false);
      interaction = false;
      delay(100);
  }while(reessayer == true && arreter == false);
  delay(1500);
  virage(45);
  virage(-90);
  virage(45);
  delay(2000);
}
